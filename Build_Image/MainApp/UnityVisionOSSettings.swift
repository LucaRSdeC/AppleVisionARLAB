// GENERATED BY BUILD
import Foundation
import SwiftUI
import PolySpatialRealityKit
import UnityFramework

let unityStartInBatchMode = false

extension UnityPolySpatialApp {
    func initialWindowName() -> String { return "Unbounded" }

    func getAllAvailableWindows() -> [String] { return ["Unbounded"] }

    func getAvailableWindowsForMatch() -> [simd_float3] { return [] }

    func displayProviderParameters() -> DisplayProviderParameters { return .init(
            framebufferWidth: 1830,
            framebufferHeight: 1600,
            leftEyePose: .init(position: .init(x: -0.033, y: -0.02, z: -0.01),
                               rotation: .init(x: 0, y: 0, z: 0, w: 1)),
            rightEyePose: .init(position: .init(x: -0.033, y: -0.02, z: -0.01),
                                rotation: .init(x: 0, y: 0, z: 0, w: 1)),
            leftProjectionHalfAngles: .init(left: -1.73205, right: 1, top: 1, bottom: -1.19175),
            rightProjectionHalfAngles: .init(left: -1.73205, right: 1, top: 1, bottom: -1.19175)
        )
    }

    
    @SceneBuilder
    var mainScenePart0: some Scene {

                    ImmersiveSpace(id: "Unbounded", for: UUID.self) { uuid in
                        PolySpatialContentViewWrapper(minSize: .init(1.000, 1.000, 1.000), maxSize: .init(1.000, 1.000, 1.000))
                            .environment(\.pslWindow, PolySpatialWindow(uuid.wrappedValue, "Unbounded", .init(1.000, 1.000, 1.000)))
                            .onImmersionChange() { oldContext, newContext in
                                PolySpatialWindowManagerAccess.onImmersionChange(oldContext.amount, newContext.amount)
                            }
                        KeyboardTextField().frame(width: 0, height: 0).modifier(LifeCycleHandlerModifier())
                    } defaultValue: { UUID() }  .upperLimbVisibility(.automatic) .persistentSystemOverlays(.automatic)
                    .immersionStyle(selection: .constant(.automatic), in: .automatic)
        WindowGroup(id: "LoadingWindow") {
            Text("Loading...")
        }.defaultSize(width: 0.2, height: 0.15)
    }

    @SceneBuilder
    var mainScene: some Scene {
        mainScenePart0
    }


    struct LifeCycleHandlerModifier: ViewModifier {
        func body(content: Content) -> some View {
            content
                .onOpenURL(perform: { url in
                    UnityLibrary.instance?.setAbsoluteUrl(url.absoluteString)
                })
        }
    }
}
